version: "3.9"

services:
  adempiere.db:
    build:
      context: postgresql/
      dockerfile: Dockerfile
      args:
        POSTGRES_IMAGE: ${POSTGRES_IMAGE}   
    container_name: ${POSTGRES_CONTAINER_NAME}
    hostname: ${POSTGRES_HOSTNAME}
    #image: ${ceee.dev/POSTGRES_IMAGE}       # If there is an image, Dockerfile will be ignored! Use this if you want to bypass the Dockerfile + initdb.sh.
    restart: ${GENERIC_RESTART}
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}          # Set a fixed external portvolumes:
    volumes:
      - volume_postgres:${POSTGRES_DEFAULT_DB_PATH_ON_CONTAINER} # Database dir for container. Default for Postgres.
      - volume_backups:${POSTGRES_DB_BACKUP_PATH_ON_CONTAINER}   # Backup dir for container. Must be created with Dockerfile
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - adempiere_network
      
  adempiere-zk:
    image: ${ADEMPIERE_ZK_IMAGE}
    container_name: ${ADEMPIERE_ZK_CONTAINER_NAME}
    hostname: ${ADEMPIERE_ZK_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_ZK_EXTERNAL_PORT}:${ADEMPIERE_ZK_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    environment:
      ADEMPIERE_DB_SERVER: ${POSTGRES_CONTAINER_NAME} #adempiere.db
    depends_on:
      adempiere.db:
        condition: service_healthy
    networks:
      - adempiere_network 

  adempiere-site:
    image: ${ADEMPIERE_SITE_IMAGE}
    container_name: ${ADEMPIERE_SITE_CONTAINER_NAME}
    hostname: ${ADEMPIERE_SITE_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_SITE_EXTERNAL_PORT}:${ADEMPIERE_SITE_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    environment:
      ZK_HOST: ${ADEMPIERE_SITE_ZK_URL}:${ADEMPIERE_ZK_EXTERNAL_PORT}
      VUE_HOST: ${ADEMPIERE_SITE_VUE_URL}:${VUE_UI_EXTERNAL_PORT}
    depends_on:
      - adempiere-zk
    networks:
      - adempiere_network 
      
networks:
  adempiere_network:
    name: ${ADEMPIERE_NETWORK}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}      # Set subnet for all containers created.
          gateway: ${NETWORK_GATEWAY}
          # ip-range: ${NETWORK_IP_RANGE}   # supposedly not allowed

volumes:
  volume_postgres:
    name: ${POSTGRES_VOLUME}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DB_PATH_ON_HOST} # Must be created on host before calling docker compose. The persistent database will be located locally here.
  volume_backups:
    name: ${BACKUPS_VOLUME}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_BACKUP_PATH_ON_HOST} # Must be created on host before calling docker compose. Backups must be copied here to be restored.
  volume_scheduler:
    name: ${ADEMPIERE_SCHEDULER_VOLUME}
