version: "3.9"

services:
  adempiere.db:
    build:
      context: postgresql/
      dockerfile: Dockerfile
      args:
        POSTGRES_IMAGE: ${POSTGRES_IMAGE}   
    container_name: ${POSTGRES_CONTAINER_NAME}
    hostname: ${POSTGRES_HOSTNAME}
    #image: ${ceee.dev/POSTGRES_IMAGE}       # If there is an image, Dockerfile will be ignored! Use this if you want to bypass the Dockerfile + initdb.sh.
    restart: ${GENERIC_RESTART}
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}          # Set a fixed external portvolumes:
    volumes:
      - volume_postgres:${POSTGRES_DEFAULT_DB_PATH_ON_CONTAINER} # Database dir for container. Default for Postgres.
      - volume_backups:${POSTGRES_DB_BACKUP_PATH_ON_CONTAINER}   # Backup dir for container. Must be created with Dockerfile
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - adempiere_network

  redis:
    image: redis:4-alpine
    container_name: adempiere-redis
    stdin_open: true
    tty: true
    ports:
      - '6379:6379'
    networks:
      - adempiere_network 

  eslastic-search:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.2
    container_name: adempiere-eslastic-search
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xmx512m -Xms512m
    networks:
      - adempiere_network 
      
  adempiere-zk:
    image: ${ADEMPIERE_ZK_IMAGE}
    container_name: ${ADEMPIERE_ZK_CONTAINER_NAME}
    hostname: ${ADEMPIERE_ZK_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_ZK_EXTERNAL_PORT}:${ADEMPIERE_ZK_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    environment:
      ADEMPIERE_DB_SERVER: ${POSTGRES_CONTAINER_NAME} #adempiere.db
    depends_on:
      adempiere.db:
        condition: service_healthy
    networks:
      - adempiere_network 

  adempiere-site:
    image: ${ADEMPIERE_SITE_IMAGE}
    container_name: ${ADEMPIERE_SITE_CONTAINER_NAME}
    hostname: ${ADEMPIERE_SITE_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_SITE_EXTERNAL_PORT}:${ADEMPIERE_SITE_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    environment:
      ZK_HOST: ${ADEMPIERE_SITE_ZK_URL}:${ADEMPIERE_ZK_EXTERNAL_PORT}
      VUE_HOST: ${ADEMPIERE_SITE_VUE_URL}:${VUE_UI_EXTERNAL_PORT}
    depends_on:
      - adempiere-zk
    networks:
      - adempiere_network 
      
  adempiere-middleware:
    image: ${ADEMPIERE_MIDDLEWARE_IMAGE}
    container_name: ${ADEMPIERE_MIDDLEWARE_CONTAINER_NAME}
    hostname: ${ADEMPIERE_MIDDLEWARE_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_MIDDLEWARE_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/50059; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      DB_HOST: ${POSTGRES_CONTAINER_NAME}
      SERVER_PRIVATE_KEY: ${ADEMPIERE_MIDDLEWARE_SERVER_PRIVATE_KEY}
    depends_on:
      adempiere.db:
        condition: service_healthy
    networks:
      - adempiere_network
      
  adempiere-backend-rs:
    image: ${ADEMPIERE_BACKEND_RS_IMAGE}
    container_name: ${ADEMPIERE_BACKEND_RS_CONTAINER_NAME}
    hostname: ${ADEMPIERE_BACKEND_RS_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_BACKEND_RS_EXTERNAL_PORT}:${ADEMPIERE_BACKEND_RS_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    environment:
      MIDDLEWARE_HOST: http://${ADEMPIERE_MIDDLEWARE_CONTAINER_NAME}:${ADEMPIERE_MIDDLEWARE_PORT}
    depends_on:
      adempiere-middleware:
        condition: service_healthy
    networks:
      - adempiere_network
  
  adempiere-scheduler:
    image: ${ADEMPIERE_SCHEDULER_IMAGE}
    container_name: ${ADEMPIERE_SCHEDULER_CONTAINER_NAME}
    hostname: ${ADEMPIERE_SCHEDULER_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_SCHEDULER_EXTERNAL_PORT}:${ADEMPIERE_SCHEDULER_PORT}
    command:
      - "agent"
      - "--bootstrap-expect=1"
      - "--node-name=node1"
      - "--server"
      - "--ui=false"
    volumes:
      - volume_scheduler:/dkron.data
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    networks:
      - adempiere_network
      
  adempiere-grpc-server:
    image: ${VUE_BACKEND_ADEMPIERE_GRPC_SERVER_IMAGE}
    container_name: ${VUE_BACKEND_CONTAINER_NAME}
    hostname: ${VUE_BACKEND_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${VUE_BACKEND_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/50059; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      DB_HOST: ${POSTGRES_CONTAINER_NAME}
      SECRET_KEY: ${VUE_BACKEND_SECRET_KEY}
      SERVICES_ENABLED: ${VUE_BACKEND_SERVICES_ENABLED}
      SERVER_LOG_LEVEL: ${VUE_BACKEND_LOG_LEVEL}
    depends_on:
      adempiere.db:
        condition: service_healthy
    networks:
      - adempiere_network

  vue-api:
    image: ${VUE_API_IMAGE}
    container_name: ${VUE_API_CONTAINER_NAME}
    hostname: ${VUE_API_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${VUE_API_EXTERNAL_PORT}:${VUE_API_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    healthcheck:
      test: "sh -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/$(hostname)/8085; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      ES_HOST: ${VUE_API_ES_HOST}
      ES_PORT: ${VUE_API_ES_PORT}
      AD_ACCESSHOST: ${VUE_BACKEND_CONTAINER_NAME}
      AD_STORE_ACCESS_HOST: ${VUE_BACKEND_CONTAINER_NAME}
      AD_BUSINESSHOST: ${VUE_BACKEND_CONTAINER_NAME}
      AD_DICTIONARYHOST: ${VUE_BACKEND_CONTAINER_NAME}
      AD_ACCESSAPIHOST: ${VUE_BACKEND_CONTAINER_NAME}
      AD_STORE_HOST: ${VUE_BACKEND_CONTAINER_NAME}
      AD_DEFAULT_HOST: ${VUE_BACKEND_CONTAINER_NAME}
      AD_TOKEN: ${AD_TOKEN}
      VS_ENV: ${VUE_API_VS_ENV}
      INDEX: ${VUE_API_INDEX}
      RESTORE_DB: N
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    depends_on:      
      - adempiere-grpc-server         
      - eslastic-search
      - redis
    networks:
      - adempiere_network

  e-commerce:
    image: erpya/adempiere-ecommerce
    container_name: adempiere-ecommerce
    depends_on:
      - vue-api
      - adempiere-grpc-server
    stdin_open: true
    tty: true
    environment:
      SERVER_PORT: 3000
      # Set the ip or dns of the server (not the dns of the container) to access from other client hosts
      API_URL: http://localhost:8085
      VS_ENV: ${VUE_API_VS_ENV}
      INDEX: ${VUE_API_INDEX}
    ports:
      - 3000:3000
    networks:
      - adempiere_network 
      
  vue-ui:
    image: ${VUE_UI_IMAGE}
    container_name: ${VUE_UI_CONTAINER_NAME}
    hostname: ${VUE_UI_HOSTNAME}
    restart: ${GENERIC_RESTART}
    ports:
      - ${VUE_UI_EXTERNAL_PORT}:${VUE_UI_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    environment:
      API_URL: ${VUE_UI_URL}:${VUE_API_EXTERNAL_PORT}
      TASK_MANAGER_URL: ${VUE_UI_TASK_MANAGER_URL}:${VUE_UI_TASK_MANAGER_PORT}
    networks:
      - adempiere_network
      
networks:
  adempiere_network:
    name: ${ADEMPIERE_NETWORK}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}      # Set subnet for all containers created.
          gateway: ${NETWORK_GATEWAY}
          # ip-range: ${NETWORK_IP_RANGE}   # supposedly not allowed

volumes:
  volume_postgres:
    name: ${POSTGRES_VOLUME}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DB_PATH_ON_HOST} # Must be created on host before calling docker compose. The persistent database will be located locally here.
  volume_backups:
    name: ${BACKUPS_VOLUME}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_BACKUP_PATH_ON_HOST} # Must be created on host before calling docker compose. Backups must be copied here to be restored.
  volume_scheduler:
    name: ${ADEMPIERE_SCHEDULER_VOLUME}
